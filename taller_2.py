# -*- coding: utf-8 -*-
"""Taller_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u_ayAE28Wdzi9lNSSSUvatYtCTR3L8QN

#Taller 2

###1. Numeros palíndromos:
Escriba una función que reciba un numero entero (positivo) o un String y entregue como
respuesta si la entrada es o no un palíndromo.
"""

verificacion =input('Digite un numero entero o una palabra: ')
def prueba_1(verificacion):
   
  verificacion_2 = verificacion[::-1]
  if verificacion_2.lower() == verificacion.lower():
      resultado='es un polindromo'
    
  else: 
      resultado= 'no es un polindromo'
  return resultado
  

print('El numero o palabra:',verificacion,',', prueba_1(verificacion))

"""###2. Numeros primos
Escriba una función que reciba como entrada un número y determine si es o no un numero
primo.
"""

def primo():
    num =int(input('Digite un numero: '))
    count=0 #Contador numeros divisores
    
    if num <= 1:
        print('El número:', num, 'no es primo')
    else: 
        for i in range(1,num+1): 
          if num % i == 0:
             count+=1    
             print('Numero divisor:', i)    
        if count > 2:
          print('El número:', num, 'no es primo')
        else:
          print('El número:', num, ' es primo')    

primo()

"""### 3. Numeros primos 2
Escriba una función que devuelva una lista de numeros primos con base a la cantidad que el usuario le solicite, Ejemplo si el usuario ingresa 3 debe retornar los 3 primeros numeros primos. 

"""

num =int(input('Digite el numero de primos que desea imprimir: '))
def primo(num):

    num_comprobar = 2 #Numero a comprobar
    limite = 1 # hasta donde ir
    lista_primos = []

    while limite <= num:
        count = 0 #Contador para numeros divisores
            
        for i in range(2,num_comprobar+1): 
              if num_comprobar % i == 0:
                count+=1    

        if count <= 1:
            lista_primos+=[num_comprobar]   
            limite+=1

        num_comprobar+=1

    return lista_primos

# Imprimir funcion
if num <=0:
    print('Por favor ingrese un numero valido')
else:
  print('Lista de numeros primos hasta el numero:', num,':',primo(num))

k=1
i=2

num = int(input("Digite la cantidad de numero primos que desea imprimir: "))

while k <= num:
  for j in range(2,i):
    if i % j == 0:
      print(i,'...i')
      print(j,'----j')
      print('-------------1.')
      break
    if j==i-1:
      print(i)
      k=k+1
  i+=1

"""### 4. Numeros primos 3
El primo de Mersenne es un numero primo de la forma 2
− 1, una de las propiedades de los
primos de Mersenne es que p debe ser también un número primo, escriba una función que
imprima la cantidad de numeros que el usuario solicite, Ejemplo: si el usuario ingreso 3 los
primeros primos de Mersenne deberían ser 3, 7 y 31.  

"""

import math

num =int(input('Digite el numero de primos de Mersenne que desea imprimir: '))
def primo(num):
    # Declarar variables
    num_comprobar = 2 #Numero a comprobar
    limite = 1 # hasta donde ir
    lista_primos = []

    while limite <= num:

        # Declarar variables
        count = 0 #Contador para numeros divisores
        num_mer = 0 #Calcular numero mer

        #Verificar numeros primos  
        for i in range(2,num_comprobar+1): 
              if num_comprobar % i == 0:
                count+=1    
                
        # Verificar numeros primos de Mersenne
        if count <= 1:
            num_mer = int(math.pow(2, num_comprobar)- 1)

            primo_ver = True
            for j in range(2, num_mer):
              if (num_mer%j)==0:
                  primo_ver = False
                  break

            if primo_ver == True:
              lista_primos+=[num_mer]   
              limite+=1

        num_comprobar+=1

    return lista_primos

# Imprimir funcion
if num <=0:
    print('Por favor ingrese un numero valido')
else:
  print('Lista de numeros primos hasta el numero:', num,':',primo(num))

"""### 5. Máximo común divisor
Escriba una función que reciba dos numeros y retorne el cálculo de su máximo común divisor.  
"""

num1 = int(input("Digite el primer numero: "))
num2 = int(input("Digite el segundo numero: "))

def max_divi(a,b):

  if a < b:
    return max_divi(b, a)

  while b > 0:
    a, b = b, a % b
  return a

print('...', max_divi(num1,num2))

"""### 6. Numeros romanos
Escriba una función que reciba un numero y retorne como resultado el numero romano de dicho número.  

"""

numero = int(input('Digite el numero que desea convertir a romano: '))
def num_romano(numero):
  numeros=[1000, 900, 500, 400, 100 , 90 , 50, 40 , 10 , 9 , 5 , 4 , 3 , 2 , 1]
  romanos=['M', 'CM', 'D', 'CD', 'C', 'XC','L', 'XL', 'X', 'IX', 'V', 'IV', 'III', 'II', 'I']
  #romanos = {'M':1000, 'CM':900, 'D':500, 'CD':400, 'C':100 ,'XC':90 ,'L':50, 'XL':40 ,'X':10 ,'IX':9 ,'V':5 ,'IV':4 ,'III':3 ,'II':2 ,'I':1}

  i=0
  romano = ''
  while numero > 0:
    for _ in range(numero // numeros[i]):
      romano+=romanos[i]
      numero-=numeros[i]
    
    i+=1
  return romano

print('El número entero',numero,'se escribe en numero romano: ',num_romano(numero))